import os
import discord
from discord.ext import commands
from dotenv import load_dotenv
import traceback

load_dotenv()

class Bot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.all()
        super().__init__(command_prefix='!', intents=intents)
        self.modules_file = "modules.txt"
        self.loaded_modules = []
        self.log_channel_id = int(os.getenv('LOG_CHANNEL_ID'))
        self.log_channel = None
        self.owner_id = int(os.getenv('BOT_OWNER_ID'))

    async def on_ready(self):
        print(f'–ë–æ—Ç {self.user} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Discord!')
        self.log_channel = self.get_channel(self.log_channel_id)
        await self.load_initial_modules()
        await self.send_startup_report()

    async def send_startup_report(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö"""
        if not self.log_channel:
            return

        loaded = []
        failed = []
        
        for module in self.loaded_modules:
            try:
                await self.load_extension(module.replace('.py', ''))
                loaded.append(module)
            except Exception as e:
                failed.append(f"{module}: {str(e)}")
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {module}: {str(e)}")
                traceback.print_exc()

        message = "**–û—Ç—á—ë—Ç –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞**\n\n"
        message += f"üü¢ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(loaded)}\n"
        
        if loaded:
            message += "```\n" + "\n".join(loaded) + "\n```\n"
        
        if failed:
            message += f"üî¥ –û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ ({len(failed)}):\n"
            message += "```\n" + "\n".join(failed) + "\n```"
        else:
            message += "üî¥ –û—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ—Ç"

        await self.log_channel.send(message)

    async def load_initial_modules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞ modules.txt"""
        if not os.path.exists(self.modules_file):
            return

        with open(self.modules_file, 'r') as f:
            modules = [line.strip() for line in f.readlines() if line.strip()]
            self.loaded_modules = modules

    async def add_module(self, module_path: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å"""
        if module_path in self.loaded_modules:
            return False
            
        try:
            await self.load_extension(module_path.replace('.py', ''))
            self.loaded_modules.append(module_path)
            self.save_modules_list()
            return True
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module_path}: {str(e)}"
            print(error_msg)
            traceback.print_exc()
            await self.log_channel.send(f"‚ùå {error_msg}")
            return False

    def save_modules_list(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –≤ —Ñ–∞–π–ª"""
        with open(self.modules_file, 'w') as f:
            f.write('\n'.join(self.loaded_modules))

    async def reload_all_modules(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏"""
        success = True
        modules_to_reload = self.loaded_modules.copy()
        
        for module_path in modules_to_reload:
            try:
                await self.reload_extension(module_path.replace('.py', ''))
                await self.log_channel.send(f"üîÑ –ú–æ–¥—É–ª—å {module_path} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                success = False
                error_msg = f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ {module_path}: {str(e)}"
                print(error_msg)
                traceback.print_exc()
                await self.log_channel.send(f"‚ùå {error_msg}")
        
        return success

bot = Bot()

@bot.command()
@commands.is_owner()
async def update(ctx):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    await ctx.send("–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª–µ–π...")
    if await bot.reload_all_modules():
        await ctx.send("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    else:
        await ctx.send("‚ö† –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏ (—Å–º. –ª–æ–≥–∏)")

@bot.command()
@commands.is_owner()
async def add(ctx, module_path: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    if not os.path.exists(module_path):
        await ctx.send(f"‚ùå –§–∞–π–ª {module_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
        
    if await bot.add_module(module_path):
        await ctx.send(f"‚úÖ –ú–æ–¥—É–ª—å {module_path} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await ctx.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_path} (—Å–º. –ª–æ–≥–∏)")

if __name__ == "__main__":
    TOKEN = os.getenv('DISCORD_TOKEN')
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω DISCORD_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    else:
        bot.run(TOKEN)
